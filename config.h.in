/*                                                                      
 * GPL3 License 
 * 
 * Copyright (C) 2021 Antonino Natale
 * This file is part of QASP.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#cmakedefine DEBUG              @DEBUG@
#cmakedefine DEBUG_LEVEL        @DEBUG_LEVEL@
#cmakedefine HAVE_IDLV          @HAVE_IDLV@
#cmakedefine HAVE_WASP          @HAVE_WASP@
#cmakedefine HAVE_GRINGO        @HAVE_GRINGO@
#cmakedefine HAVE_CLASP         @HAVE_CLASP@



#define QASP_PROGRAM_NAME       "@CMAKE_PROJECT_NAME@"

#define QASP_VERSION_MAJOR      "@CMAKE_PROJECT_VERSION_MAJOR@"
#define QASP_VERSION_MINOR      "@CMAKE_PROJECT_VERSION_MINOR@"
#define QASP_VERSION_PATCH      "@CMAKE_PROJECT_VERSION_PATCH@"
#define QASP_VERSION_TWEAK      "@CMAKE_PROJECT_VERSION_TWEAK@"


#if defined(__GNUC__) || defined(__GNUG__)
#   define QASP_COMPILER_NAME           "gcc"
#   define QASP_COMPILER_VERSION        __VERSION__
#elif defined(__clang__)
#   define QASP_COMPILER_NAME           "clang"
#   define QASP_COMPILER_VERSION        __clang_version__
#elif defined(__MSC_VER)
#   define QASP_COMPILER_NAME           "mvc++"
#   define QASP_COMPILER_VERSION        _MSC_FULL_VER
#else
#   define QASP_COMPILER_NAME           "unknown"
#   define QASP_COMPILER_VERSION        ""
#endif





#if defined(__GNUC__) || defined(__GNUG__) || defined(__clang__)
#   define likely(x)            __builtin_expect(!!(x), 1)
#   define unlikely(x)          __builtin_expect(!!(x), 0)
#else
#   define likely(x)            (x)
#   define unlikely(x)          (x)
#endif


#ifndef DEBUG
#   define DEBUG_LEVEL 127
#endif


#define ALL     0
#define TRACE   1
#define INFO    2
#define WARN    3
#define ERROR   4

extern int quiet;

#define LOG(filename, severity)     \
    severity >= DEBUG_LEVEL && !quiet && (std::clog << "[" << #severity << "]\t (" << filename << "): ")



#if defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wclass-memaccess"
#endif